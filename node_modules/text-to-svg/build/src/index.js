/**
 * Copyright (c) 2015 Hideki Shiro
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var path = require('path');
var fs = require('fs');
var assert = require('assert');
var opentype = require('opentype.js');

var DEFAULT_FONT = path.join(__dirname, '../fonts/ipag.ttf');

function toArrayBuffer(buffer) {
  var ab = new ArrayBuffer(buffer.length);
  var view = new Uint8Array(ab);
  for (var i = 0; i < buffer.length; ++i) {
    view[i] = buffer[i];
  }
  return ab;
}

function cmdToSVG(cmd) {
  switch (cmd.type) {
    case 'M':
      return 'M ' + cmd.x + ' ' + cmd.y;
    case 'L':
      return 'L ' + cmd.x + ' ' + cmd.y;
    case 'C':
      return 'C ' + cmd.x1 + ' ' + cmd.y1 + ' ' + cmd.x2 + ' ' + cmd.y2 + ' ' + cmd.x + ' ' + cmd.y;
    case 'Q':
      return 'Q ' + cmd.x1 + ' ' + cmd.y1 + ' ' + cmd.x + ' ' + cmd.y;
    case 'Z':
      return 'Z';
    default:
      assert('Unknown Command: ' + cmd);
  }
}

var TextToSVG = (function () {
  function TextToSVG() {
    var file = arguments.length <= 0 || arguments[0] === undefined ? DEFAULT_FONT : arguments[0];

    _classCallCheck(this, TextToSVG);

    var buf = fs.readFileSync(file);
    var ab = toArrayBuffer(buf);
    this.font = opentype.parse(ab);
  }

  _createClass(TextToSVG, [{
    key: 'getD',
    value: function getD(text) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var x = options.x || 0;
      var y = options.y || 0;
      var fontSize = options.fontSize || 72;
      var kerning = 'kerning' in options ? options.kerning : true;

      var yAnchor = options.anchor || 'bottom';
      switch (yAnchor) {
        case 'top':
          y += this.font.ascender / this.font.unitsPerEm * fontSize;
          break;
        case 'bottom':
          y += 0;
          break;
        default:
          throw new Error('Unknown anchor option: ' + yAnchor);
      }

      var path = this.font.getPath(text, x, y, fontSize, { kerning: kerning });
      return path.commands.map(function (cmd) {
        return cmdToSVG(cmd);
      }).join(' ');
    }
  }, {
    key: 'getPath',
    value: function getPath(text) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      options.attributes = options.attributes || {};

      var attributes = Object.keys(options.attributes).map(function (key) {
        return key + '="' + options.attributes[key] + '"';
      }).join(' ');
      var d = this.getD(text, options);

      if (attributes) {
        return '<path ' + attributes + ' d="' + d + '"/>';
      } else {
        return '<path d="' + d + '"/>';
      }
    }
  }, {
    key: 'getSVG',
    value: function getSVG(text) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var svg = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">';
      svg += this.getPath(text, options);
      svg += '</svg>';

      return svg;
    }
  }]);

  return TextToSVG;
})();

exports.TextToSVG = TextToSVG;